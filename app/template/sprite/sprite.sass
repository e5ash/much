// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$arrow-down-name: 'arrow-down'
$arrow-down-x: 46px
$arrow-down-y: 39px
$arrow-down-offset-x: -46px
$arrow-down-offset-y: -39px
$arrow-down-width: 8px
$arrow-down-height: 4px
$arrow-down-total-width: 61px
$arrow-down-total-height: 96px
$arrow-down-image: 'sprite.png'
$arrow-down: (46px, 39px, -46px, -39px, 8px, 4px, 61px, 96px, 'sprite.png', 'arrow-down', )
$checkbox-name: 'checkbox'
$checkbox-x: 42px
$checkbox-y: 30px
$checkbox-offset-x: -42px
$checkbox-offset-y: -30px
$checkbox-width: 12px
$checkbox-height: 9px
$checkbox-total-width: 61px
$checkbox-total-height: 96px
$checkbox-image: 'sprite.png'
$checkbox: (42px, 30px, -42px, -30px, 12px, 9px, 61px, 96px, 'sprite.png', 'checkbox', )
$cross-border-name: 'cross-border'
$cross-border-x: 42px
$cross-border-y: 0px
$cross-border-offset-x: -42px
$cross-border-offset-y: 0px
$cross-border-width: 19px
$cross-border-height: 18px
$cross-border-total-width: 61px
$cross-border-total-height: 96px
$cross-border-image: 'sprite.png'
$cross-border: (42px, 0px, -42px, 0px, 19px, 18px, 61px, 96px, 'sprite.png', 'cross-border', )
$cross-name: 'cross'
$cross-x: 42px
$cross-y: 18px
$cross-offset-x: -42px
$cross-offset-y: -18px
$cross-width: 13px
$cross-height: 12px
$cross-total-width: 61px
$cross-total-height: 96px
$cross-image: 'sprite.png'
$cross: (42px, 18px, -42px, -18px, 13px, 12px, 61px, 96px, 'sprite.png', 'cross', )
$facebook-name: 'facebook'
$facebook-x: 0px
$facebook-y: 44px
$facebook-offset-x: 0px
$facebook-offset-y: -44px
$facebook-width: 24px
$facebook-height: 52px
$facebook-total-width: 61px
$facebook-total-height: 96px
$facebook-image: 'sprite.png'
$facebook: (0px, 44px, 0px, -44px, 24px, 52px, 61px, 96px, 'sprite.png', 'facebook', )
$google-name: 'google'
$google-x: 0px
$google-y: 0px
$google-offset-x: 0px
$google-offset-y: 0px
$google-width: 42px
$google-height: 44px
$google-total-width: 61px
$google-total-height: 96px
$google-image: 'sprite.png'
$google: (0px, 0px, 0px, 0px, 42px, 44px, 61px, 96px, 'sprite.png', 'google', )
$info-name: 'info'
$info-x: 42px
$info-y: 39px
$info-offset-x: -42px
$info-offset-y: -39px
$info-width: 4px
$info-height: 14px
$info-total-width: 61px
$info-total-height: 96px
$info-image: 'sprite.png'
$info: (42px, 39px, -42px, -39px, 4px, 14px, 61px, 96px, 'sprite.png', 'info', )
$spritesheet-width: 61px
$spritesheet-height: 96px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($arrow-down, $checkbox, $cross-border, $cross, $facebook, $google, $info, )
$spritesheet: (61px, 96px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
